{
  "_args": [
    [
      {
        "raw": "@npmcorp/copy@^1.0.0",
        "scope": "@npmcorp",
        "escapedName": "@npmcorp%2fcopy",
        "name": "@npmcorp/copy",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/rebecca/code/npm/node_modules/@npmcorp/move"
    ]
  ],
  "_from": "@npmcorp/copy@>=1.0.0 <2.0.0",
  "_id": "@npmcorp/copy@1.0.0",
  "_inCache": true,
  "_location": "/@npmcorp/move/@npmcorp/copy",
  "_nodeVersion": "4.6.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/copy-1.0.0.tgz_1488166712044_0.09934459743089974"
  },
  "_npmUser": {
    "name": "iarna",
    "email": "me@re-becca.org"
  },
  "_npmVersion": "4.4.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@npmcorp/copy@^1.0.0",
    "scope": "@npmcorp",
    "escapedName": "@npmcorp%2fcopy",
    "name": "@npmcorp/copy",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@npmcorp/move"
  ],
  "_resolved": "https://registry.npmjs.org/@npmcorp/copy/-/copy-1.0.0.tgz",
  "_shasum": "ffa8003a144c8340858d9d5998895210d1fa1e12",
  "_shrinkwrap": null,
  "_spec": "@npmcorp/copy@^1.0.0",
  "_where": "/Users/rebecca/code/npm/node_modules/@npmcorp/move",
  "author": {
    "name": "Rebecca Turner",
    "email": "me@re-becca.org",
    "url": "http://re-becca.org/"
  },
  "bugs": {
    "url": "https://github.com/npm/npmcorp-copy/issues"
  },
  "dependencies": {
    "aproba": "^1.1.1",
    "fs-write-stream-atomic": "^1.0.8",
    "iferr": "^0.1.5",
    "mkdirp": "^0.5.1",
    "rimraf": "^2.5.4",
    "run-queue": "^1.0.0"
  },
  "description": "Copy files, directories and links, preserving ownership and perms",
  "devDependencies": {
    "standard": "^8.6.0",
    "tacks": "^1.2.6",
    "tap": "^10.1.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "ffa8003a144c8340858d9d5998895210d1fa1e12",
    "tarball": "https://registry.npmjs.org/@npmcorp/copy/-/copy-1.0.0.tgz"
  },
  "files": [
    "copy.js",
    "is-windows.js"
  ],
  "gitHead": "731abdc0e3fd2f297e9423620524b6be38c0ef20",
  "homepage": "https://www.npmjs.com/package/@npmcorp/copy",
  "keywords": [],
  "license": "ISC",
  "main": "copy.js",
  "maintainers": [
    {
      "name": "iarna",
      "email": "me@re-becca.org"
    }
  ],
  "name": "@npmcorp/copy",
  "optionalDependencies": {},
  "readme": "# @npminc/copy\n\nCopy files, directories and symlinks\n\n```\nconst copy = require('@npminc/copy')\ncopy('/path/to/thing', '/new/path/thing').then(() => {\n  // this is now copied\n}).catch(err => {\n  // oh noooo\n})\n```\n\nCopies files, directories and symlinks.  Ownership is maintained when\nrunning as root, permissions are always maintained.  On Windows, if symlinks\nare unavailable then junctions will be used.\n\n## PUBLIC INTERFACE\n\n### copy(from, to, [options]) → Promise\n\nRecursively copies `from` to `to` and resolves its promise when finished. \nIf `to` already exists then the promise will be rejected with an `EEXIST`\nerror.\n\nOptions are:\n\n* maxConcurrency – (Default: `1`) The maximum number of concurrent copies to do at once.\n* recurseWith - (Default: `copy.item`) The function to call on each file after recursing into a directory.\n* isWindows - (Default: `process.platform === 'win32'`) If true enables Windows symlink semantics. This requires\n  an extra `stat` to determine if the destination of a symlink is a file or directory. If symlinking a directory\n  fails then we'll try making a junction instead.\n\nOptions can also include dependency injection:\n\n* Promise - (Default: `global.Promise`) The promise implementation to use, defaults to Node's.\n* fs - (Default: `require('fs')`) The filesystem module to use.  Can be used\n  to use `graceful-fs` or to inject a mock.\n* writeStreamAtomic - (Default: `require('fs-write-stream-atomic')`) The\n  implementation of `writeStreamAtomic` to use.  Used to inject a mock.\n* getuid - (Default: `process.getuid`) A function that returns the current UID. Used to inject a mock.\n\n## EXTENSION INTERFACE\n\nOrdinarily you'd only call `copy` above.  But it's possible to use it's\ncomponent functions directly.  This is useful if, say, you're writing\n[@npminc/move](https://npmjs.com/package/@npminc/move). \n\n### copy.file(from, to, options) → Promise\n\nCopies a ordinary file `from` to destination `to`.  Uses\n`fs-write-stream-atomic` to ensure that the file is entirely copied or not\nat all.\n\nOptions are:\n\n* uid, gid - (Optional) If `getuid()` is `0` then this and gid will be used to\n  set the user and group of `to`.  If uid is present then gid must be too.\n* mode - (Optional) If set then `to` will have its perms set to `mode`.\n* fs - (Default: `require('fs')`) The filesystem module to use.  Can be used\n  to use `graceful-fs` or to inject a mock.\n* Promise - (Default: `global.Promise`) The promise implementation to use, defaults to Node's.\n* writeStreamAtomic - (Default `require('fs-write-stream-atomic')`) The\n  implementation of `writeStreamAtomic` to use.  Used to inject a mock.\n\n### copy.symlink(from, to, options) → Promise\n\nCopies a symlink `from` to destination `to`.  If on Windows then if\nsymlinking fails, a junction will be used instead.\n\nOptions are:\n\n* top - The top level the copy is being run from.  This is used to determine\n  if the symlink destination is within the set of files we're copying or\n  outside it.\n* fs - (Default: `require('fs')`) The filesystem module to use.  Can be used\n  to use `graceful-fs` or to inject a mock.\n* Promise - (Default: `global.Promise`) The promise implementation to use, defaults to Node's.\n* isWindows - (Default: `process.platform === 'win32'`) If true enables Windows symlink semantics. This requires\n  an extra `stat` to determine if the destination of a symlink is a file or directory. If symlinking a directory\n  fails then we'll try making a junction instead.\n\n### copy.recurse(from, to, options) → Promise\n\nReads all of the files in directory `from` and adds them to the `queue`\nusing `recurseWith` (by default `copy.item`).\n\nOptions are:\n\n* queue - A [`run-queue`](https://npmjs.com/package/run-queue) object to add files found inside `from` to.\n* recurseWith - (Default: `copy.item`) The function to call on each file after recursing into a directory.\n* uid, gid - (Optional) If `getuid()` is `0` then this and gid will be used to\n  set the user and group of `to`.  If uid is present then gid must be too.\n* mode - (Optional) If set then `to` will have its perms set to `mode`.\n* fs - (Default: `require('fs')`) The filesystem module to use.  Can be used\n  to use `graceful-fs` or to inject a mock.\n* getuid - (Default: `process.getuid`) A function that returns the current UID. Used to inject a mock.\n\n### copy.item(from, to, options) → Promise\n\nCopies some kind of `from` to destination `to`.  This looks at the filetype\nand calls `copy.file`, `copy.symlink` or `copy.recurse` as appropriate.\n\nSymlink copies are queued with a priority such that they happen after all\nfile and directory copies as you can't create a junction on windows to a\nfile that doesn't exist yet.\n\nOptions are:\n\n* top - The top level the copy is being run from.  This is used to determine\n  if the symlink destination is within the set of files we're copying or\n  outside it.\n* queue - The [`run-queue`](https://npmjs.com/package/run-queue) object to\n  pass to `copy.recurse` if `from` is a directory.\n* recurseWith - (Default: `copy.item`) The function to call on each file after recursing into a directory.\n* uid, gid - (Optional) If `getuid()` is `0` then this and gid will be used to\n  set the user and group of `to`.  If uid is present then gid must be too.\n* mode - (Optional) If set then `to` will have its perms set to `mode`.\n* fs - (Default: `require('fs')`) The filesystem module to use.  Can be used\n  to use `graceful-fs` or to inject a mock.\n* getuid - (Default: `process.getuid`) A function that returns the current UID. Used to inject a mock.\n* isWindows - (Default: `process.platform === 'win32'`) If true enables Windows symlink semantics. This requires\n  an extra `stat` to determine if the destination of a symlink is a file or directory. If symlinking a directory\n  fails then we'll try making a junction instead.\n* Promise - (Default: `global.Promise`) The promise implementation to use, defaults to Node's.\n* writeStreamAtomic - (Default `require('fs-write-stream-atomic')`) The\n  implementation of `writeStreamAtomic` to use.  Used to inject a mock.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/npmcorp-copy.git"
  },
  "scripts": {
    "test": "standard && tap --coverage test"
  },
  "version": "1.0.0"
}

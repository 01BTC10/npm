{
  "_args": [
    [
      {
        "raw": "@npmcorp/move@~1.0.0",
        "scope": "@npmcorp",
        "escapedName": "@npmcorp%2fmove",
        "name": "@npmcorp/move",
        "rawSpec": "~1.0.0",
        "spec": ">=1.0.0 <1.1.0",
        "type": "range"
      },
      "/Users/rebecca/code/npm"
    ]
  ],
  "_from": "@npmcorp/move@>=1.0.0 <1.1.0",
  "_id": "@npmcorp/move@1.0.0",
  "_inCache": true,
  "_location": "/@npmcorp/move",
  "_nodeVersion": "4.6.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/move-1.0.0.tgz_1488167362493_0.06707011582329869"
  },
  "_npmUser": {
    "name": "iarna",
    "email": "me@re-becca.org"
  },
  "_npmVersion": "4.4.0",
  "_phantomChildren": {
    "aproba": "1.1.1",
    "fs-write-stream-atomic": "1.0.10",
    "iferr": "0.1.5",
    "mkdirp": "0.5.1",
    "rimraf": "2.6.1"
  },
  "_requested": {
    "raw": "@npmcorp/move@~1.0.0",
    "scope": "@npmcorp",
    "escapedName": "@npmcorp%2fmove",
    "name": "@npmcorp/move",
    "rawSpec": "~1.0.0",
    "spec": ">=1.0.0 <1.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@npmcorp/move/-/move-1.0.0.tgz",
  "_shasum": "eccb118645704056e5cd8d8bfea8100feae7ea47",
  "_shrinkwrap": null,
  "_spec": "@npmcorp/move@~1.0.0",
  "_where": "/Users/rebecca/code/npm",
  "author": {
    "name": "Rebecca Turner",
    "email": "me@re-becca.org",
    "url": "http://re-becca.org/"
  },
  "bugs": {
    "url": "https://github.com/npm/npmcorp-move/issues"
  },
  "dependencies": {
    "@npmcorp/copy": "^1.0.0",
    "aproba": "^1.1.1",
    "fs-write-stream-atomic": "^1.0.8",
    "mkdirp": "^0.5.1",
    "rimraf": "^2.5.4",
    "run-queue": "^1.0.3"
  },
  "description": "Move files or directories with rename, falling back to recursive rename/copy on EXDEV errors.",
  "devDependencies": {
    "standard": "^8.6.0",
    "tacks": "^1.2.6",
    "tap": "^10.1.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "eccb118645704056e5cd8d8bfea8100feae7ea47",
    "tarball": "https://registry.npmjs.org/@npmcorp/move/-/move-1.0.0.tgz"
  },
  "files": [
    "move.js",
    "is-windows.js"
  ],
  "gitHead": "18a3164b47457b8cfea62a91bb20e4401ab2b679",
  "homepage": "https://www.npmjs.com/package/@npmcorp/move",
  "keywords": [],
  "license": "ISC",
  "main": "move.js",
  "maintainers": [
    {
      "name": "iarna",
      "email": "me@re-becca.org"
    }
  ],
  "name": "@npmcorp/move",
  "optionalDependencies": {},
  "readme": "# @npminc/move\n\nMove files and directories.\n\n```\nconst move = require('@npminc/move')\nmove('/path/to/thing', '/new/path/thing'), err => {\n  if (err) throw err\n  // thing is now moved!\n})\n```\n\nUses `rename` to move things as fast as possible.\n\nIf you `move` across devices or on filesystems that don't support renaming\nlarge directories.  That is, situations that result in `rename` returning\nthe `EXDEV` error, then `move` will fallback to copy + delete.\n\nWhen recursively copying directories it will first try to rename the\ncontents before falling back to copying.  While this will be slightly slower\nin true cross-device scenarios, it is MUCH faster in cases where the\nfilesystem can't handle directory renames.\n\nWhen copying ownership is maintained when running as root.  Permissions are\nalways maintained.  On Windows, if symlinks are unavailable then junctions\nwill be used.\n\n## INTERFACE\n\n### move(from, to, options) → Promise\n\nRecursively moves `from` to `to` and resolves its promise when finished.\nIf `to` already exists then the promise will be rejected with an `EEXIST`\nerror.\n\nStarts by trying to rename `from` to `to`.\n\nOptions are:\n\n* maxConcurrency – (Default: `1`) The maximum number of concurrent copies to do at once.\n* isWindows - (Default: `process.platform === 'win32'`) If true enables Windows symlink semantics. This requires\n  an extra `stat` to determine if the destination of a symlink is a file or directory. If symlinking a directory\n  fails then we'll try making a junction instead.\n\nOptions can also include dependency injection:\n\n* Promise - (Default: `global.Promise`) The promise implementation to use, defaults to Node's.\n* fs - (Default: `require('fs')`) The filesystem module to use.  Can be used\n  to use `graceful-fs` or to inject a mock.\n* writeStreamAtomic - (Default: `require('fs-write-stream-atomic')`) The\n  implementation of `writeStreamAtomic` to use.  Used to inject a mock.\n* getuid - (Default: `process.getuid`) A function that returns the current UID. Used to inject a mock.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/npmcorp-move.git"
  },
  "scripts": {
    "test": "standard && tap --coverage test"
  },
  "version": "1.0.0"
}
